---
import { getCollection } from "astro:content";
import PageLayout from "@/layouts/Base.astro";
import { Icon } from "astro-icon/components";
import ProjectCard from "@/components/project/ProjectCard.astro";

const allProjects = await getCollection("project");
const projectsByDate = allProjects.sort(
	(a, b) => (b.data.publishDate?.getTime() ?? 0) - (a.data.publishDate?.getTime() ?? 0),
);
const uniqueProjectTags = [
	...new Set(allProjects.flatMap((p) => (p.data.tags ? [...p.data.tags] : []))),
].sort();
---

<PageLayout meta={{ title: "Projects" }}>
	<section>
		<h2 class="title mb-12 flex items-center gap-3">
			Projects
			<a class="text-accent" href="/projects/rss.xml" target="_blank">
				<span class="sr-only">RSS feed</span>
				<Icon aria-hidden="true" class="h-6 w-6" focusable="false" name="mdi:rss" />
			</a>
		</h2>
		<div class="grid sm:grid-cols-[3fr_1fr] sm:gap-x-8 sm:gap-y-16">
			<div>
				{
					projectsByDate.length === 0 ? (
						<p>No projects yet.</p>
					) : (
						<ul id="projects-list" class="space-y-8 text-start" role="list">
							{projectsByDate.map((p) => (
								<li data-tags={(p.data.tags ?? []).join(",")}>
									<ProjectCard project={p} />
								</li>
							))}
						</ul>
					)
				}
			</div>
			{
				!!uniqueProjectTags.length && (
					<aside class="not-prose">
						<h3 class="title mb-4 flex items-center gap-2 text-lg">
							<svg
								aria-hidden="true"
								class="h-6 w-6"
								fill="none"
								stroke="currentColor"
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="1.5"
								viewBox="0 0 24 24"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path d="M0 0h24v24H0z" fill="none" stroke="none" />
								<path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
								<path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
								<path d="M6 9h-.01" />
							</svg>
							Tags
						</h3>
						<ul id="projects-filter" class="space-y-2" role="list">
							{uniqueProjectTags.map((t) => (
								<li>
									<a
										class="cactus-link inline-block before:content-['#']"
										href={`?tag=${t}`}
										data-tag={t}
										aria-pressed="false"
									>
										{t}
									</a>
								</li>
							))}
						</ul>
						<div class="mt-4">
							<a class="hover:text-link" href="/projects/" data-tag="all">
								View all <span aria-hidden="true">â†’</span>
							</a>
						</div>
					</aside>
				)
			}
		</div>
	</section>
</PageLayout>

<script>
	const filterEl = document.getElementById("projects-filter");
	const listEl = document.getElementById("projects-list");
	if (filterEl && listEl) {
		const url = new URL(window.location.href);
		let activeTag = url.searchParams.get("tag") || "all";

		function setActive(tag) {
			activeTag = tag;
			for (const link of filterEl.querySelectorAll("a[data-tag]")) {
				const isActive = link.getAttribute("data-tag") === tag;
				link.setAttribute("aria-pressed", String(isActive));
				link.classList.toggle("text-accent", isActive);
			}
		}

		function applyFilter(tag) {
			const items = listEl.querySelectorAll("li[data-tags]");
			items.forEach((li) => {
				const raw = li.getAttribute("data-tags") ?? "";
				const tags = raw
					.split(",")
					.map((t) => t.trim().toLowerCase())
					.filter(Boolean);
				const show = tag === "all" || tags.includes(tag.toLowerCase());
				li.classList.toggle("hidden", !show);
			});
		}

		filterEl.addEventListener("click", (e) => {
			const target = (e.target as HTMLElement).closest("a[data-tag]");
			if (!target) return;
			e.preventDefault();
			const tag = target.getAttribute("data-tag") ?? "all";
			const next = new URL(window.location.href);
			if (tag === "all") {
				next.searchParams.delete("tag");
			} else {
				next.searchParams.set("tag", tag);
			}
			window.history.replaceState({}, "", next);
			setActive(tag);
			applyFilter(tag);
		});

		// initialize
		setActive(activeTag);
		applyFilter(activeTag);
	}
</script>
